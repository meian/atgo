// Code generated by "enumer -type=RatedType -trimprefix=RatedType -transform=kebab"; DO NOT EDIT.

package constant

import (
	"fmt"
	"strings"
)

const _RatedTypeName = "allabcarcagcahc"

var _RatedTypeIndex = [...]uint8{0, 3, 6, 9, 12, 15}

const _RatedTypeLowerName = "allabcarcagcahc"

func (i RatedType) String() string {
	if i < 0 || i >= RatedType(len(_RatedTypeIndex)-1) {
		return fmt.Sprintf("RatedType(%d)", i)
	}
	return _RatedTypeName[_RatedTypeIndex[i]:_RatedTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RatedTypeNoOp() {
	var x [1]struct{}
	_ = x[RatedTypeAll-(0)]
	_ = x[RatedTypeABC-(1)]
	_ = x[RatedTypeARC-(2)]
	_ = x[RatedTypeAGC-(3)]
	_ = x[RatedTypeAHC-(4)]
}

var _RatedTypeValues = []RatedType{RatedTypeAll, RatedTypeABC, RatedTypeARC, RatedTypeAGC, RatedTypeAHC}

var _RatedTypeNameToValueMap = map[string]RatedType{
	_RatedTypeName[0:3]:        RatedTypeAll,
	_RatedTypeLowerName[0:3]:   RatedTypeAll,
	_RatedTypeName[3:6]:        RatedTypeABC,
	_RatedTypeLowerName[3:6]:   RatedTypeABC,
	_RatedTypeName[6:9]:        RatedTypeARC,
	_RatedTypeLowerName[6:9]:   RatedTypeARC,
	_RatedTypeName[9:12]:       RatedTypeAGC,
	_RatedTypeLowerName[9:12]:  RatedTypeAGC,
	_RatedTypeName[12:15]:      RatedTypeAHC,
	_RatedTypeLowerName[12:15]: RatedTypeAHC,
}

var _RatedTypeNames = []string{
	_RatedTypeName[0:3],
	_RatedTypeName[3:6],
	_RatedTypeName[6:9],
	_RatedTypeName[9:12],
	_RatedTypeName[12:15],
}

// RatedTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RatedTypeString(s string) (RatedType, error) {
	if val, ok := _RatedTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RatedTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RatedType values", s)
}

// RatedTypeValues returns all values of the enum
func RatedTypeValues() []RatedType {
	return _RatedTypeValues
}

// RatedTypeStrings returns a slice of all String values of the enum
func RatedTypeStrings() []string {
	strs := make([]string, len(_RatedTypeNames))
	copy(strs, _RatedTypeNames)
	return strs
}

// IsARatedType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RatedType) IsARatedType() bool {
	for _, v := range _RatedTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
