// Code generated by "enumer -type=ContestCategory -trimprefix=ContestCategory -transform=kebab"; DO NOT EDIT.

package constant

import (
	"fmt"
	"strings"
)

const (
	_ContestCategoryName_0      = "category-typical"
	_ContestCategoryLowerName_0 = "category-typical"
	_ContestCategoryName_1      = "category-past"
	_ContestCategoryLowerName_1 = "category-past"
	_ContestCategoryName_2      = "category-daily-training"
	_ContestCategoryLowerName_2 = "category-daily-training"
	_ContestCategoryName_3      = "category-unrated"
	_ContestCategoryLowerName_3 = "category-unrated"
	_ContestCategoryName_4      = "category-joi"
	_ContestCategoryLowerName_4 = "category-joi"
	_ContestCategoryName_5      = "category-ep-finalcategory-ep-open-ratedcategory-ep-open-unrated"
	_ContestCategoryLowerName_5 = "category-ep-finalcategory-ep-open-ratedcategory-ep-open-unrated"
	_ContestCategoryName_6      = "category-eparccategory-epabc"
	_ContestCategoryLowerName_6 = "category-eparccategory-epabc"
	_ContestCategoryName_7      = "category-heuristic"
	_ContestCategoryLowerName_7 = "category-heuristic"
	_ContestCategoryName_8      = "category-ep-heuristic"
	_ContestCategoryLowerName_8 = "category-ep-heuristic"
)

var (
	_ContestCategoryIndex_0 = [...]uint8{0, 16}
	_ContestCategoryIndex_1 = [...]uint8{0, 13}
	_ContestCategoryIndex_2 = [...]uint8{0, 23}
	_ContestCategoryIndex_3 = [...]uint8{0, 16}
	_ContestCategoryIndex_4 = [...]uint8{0, 12}
	_ContestCategoryIndex_5 = [...]uint8{0, 17, 39, 63}
	_ContestCategoryIndex_6 = [...]uint8{0, 14, 28}
	_ContestCategoryIndex_7 = [...]uint8{0, 18}
	_ContestCategoryIndex_8 = [...]uint8{0, 21}
)

func (i ContestCategory) String() string {
	switch {
	case i == 6:
		return _ContestCategoryName_0
	case i == 50:
		return _ContestCategoryName_1
	case i == 60:
		return _ContestCategoryName_2
	case i == 101:
		return _ContestCategoryName_3
	case i == 200:
		return _ContestCategoryName_4
	case 1000 <= i && i <= 1002:
		i -= 1000
		return _ContestCategoryName_5[_ContestCategoryIndex_5[i]:_ContestCategoryIndex_5[i+1]]
	case 1004 <= i && i <= 1005:
		i -= 1004
		return _ContestCategoryName_6[_ContestCategoryIndex_6[i]:_ContestCategoryIndex_6[i+1]]
	case i == 1200:
		return _ContestCategoryName_7
	case i == 1250:
		return _ContestCategoryName_8
	default:
		return fmt.Sprintf("ContestCategory(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ContestCategoryNoOp() {
	var x [1]struct{}
	_ = x[CategoryTypical-(6)]
	_ = x[CategoryPAST-(50)]
	_ = x[CategoryDailyTraining-(60)]
	_ = x[CategoryUnrated-(101)]
	_ = x[CategoryJOI-(200)]
	_ = x[CategoryEPFinal-(1000)]
	_ = x[CategoryEPOpenRated-(1001)]
	_ = x[CategoryEPOpenUnrated-(1002)]
	_ = x[CategoryEPARC-(1004)]
	_ = x[CategoryEPABC-(1005)]
	_ = x[CategoryHeuristic-(1200)]
	_ = x[CategoryEPHeuristic-(1250)]
}

var _ContestCategoryValues = []ContestCategory{CategoryTypical, CategoryPAST, CategoryDailyTraining, CategoryUnrated, CategoryJOI, CategoryEPFinal, CategoryEPOpenRated, CategoryEPOpenUnrated, CategoryEPARC, CategoryEPABC, CategoryHeuristic, CategoryEPHeuristic}

var _ContestCategoryNameToValueMap = map[string]ContestCategory{
	_ContestCategoryName_0[0:16]:       CategoryTypical,
	_ContestCategoryLowerName_0[0:16]:  CategoryTypical,
	_ContestCategoryName_1[0:13]:       CategoryPAST,
	_ContestCategoryLowerName_1[0:13]:  CategoryPAST,
	_ContestCategoryName_2[0:23]:       CategoryDailyTraining,
	_ContestCategoryLowerName_2[0:23]:  CategoryDailyTraining,
	_ContestCategoryName_3[0:16]:       CategoryUnrated,
	_ContestCategoryLowerName_3[0:16]:  CategoryUnrated,
	_ContestCategoryName_4[0:12]:       CategoryJOI,
	_ContestCategoryLowerName_4[0:12]:  CategoryJOI,
	_ContestCategoryName_5[0:17]:       CategoryEPFinal,
	_ContestCategoryLowerName_5[0:17]:  CategoryEPFinal,
	_ContestCategoryName_5[17:39]:      CategoryEPOpenRated,
	_ContestCategoryLowerName_5[17:39]: CategoryEPOpenRated,
	_ContestCategoryName_5[39:63]:      CategoryEPOpenUnrated,
	_ContestCategoryLowerName_5[39:63]: CategoryEPOpenUnrated,
	_ContestCategoryName_6[0:14]:       CategoryEPARC,
	_ContestCategoryLowerName_6[0:14]:  CategoryEPARC,
	_ContestCategoryName_6[14:28]:      CategoryEPABC,
	_ContestCategoryLowerName_6[14:28]: CategoryEPABC,
	_ContestCategoryName_7[0:18]:       CategoryHeuristic,
	_ContestCategoryLowerName_7[0:18]:  CategoryHeuristic,
	_ContestCategoryName_8[0:21]:       CategoryEPHeuristic,
	_ContestCategoryLowerName_8[0:21]:  CategoryEPHeuristic,
}

var _ContestCategoryNames = []string{
	_ContestCategoryName_0[0:16],
	_ContestCategoryName_1[0:13],
	_ContestCategoryName_2[0:23],
	_ContestCategoryName_3[0:16],
	_ContestCategoryName_4[0:12],
	_ContestCategoryName_5[0:17],
	_ContestCategoryName_5[17:39],
	_ContestCategoryName_5[39:63],
	_ContestCategoryName_6[0:14],
	_ContestCategoryName_6[14:28],
	_ContestCategoryName_7[0:18],
	_ContestCategoryName_8[0:21],
}

// ContestCategoryString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ContestCategoryString(s string) (ContestCategory, error) {
	if val, ok := _ContestCategoryNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ContestCategoryNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ContestCategory values", s)
}

// ContestCategoryValues returns all values of the enum
func ContestCategoryValues() []ContestCategory {
	return _ContestCategoryValues
}

// ContestCategoryStrings returns a slice of all String values of the enum
func ContestCategoryStrings() []string {
	strs := make([]string, len(_ContestCategoryNames))
	copy(strs, _ContestCategoryNames)
	return strs
}

// IsAContestCategory returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ContestCategory) IsAContestCategory() bool {
	for _, v := range _ContestCategoryValues {
		if i == v {
			return true
		}
	}
	return false
}
